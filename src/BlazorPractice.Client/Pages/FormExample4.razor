@page "/form-example-4"
@using Microsoft.Extensions.Logging
@implements IDisposable
@inject ILogger<FormExample4> Logger

<PageTitle>@pageTitle</PageTitle>

<div class="alert alert-success">
    <p>
        来源：同上
    </p>
    <h5>
        知识点：
    </h5>
    <ul>
        <li>
            没有使用验证组件（DataAnnotationsValidator 或 CustomValidation）。
        </li>
        <li>
            使用 EditContext 的 OnValidationRequested 事件处理程序执行自定义验证逻辑。<code> editContext.OnValidationRequested += HandleValidationRequested; </code>
        </li>
        <li>
           使用 ValidationMessageStore 存储、显示验证信息。
        </li>
    </ul>
</div>

<hr />

<h1>@pageTitle</h1>

<h4>Ship Holodecks</h4>

<EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">

    <div class="row g-2">
        <div class="col-auto">
            <div class="form-check form-check-inline">
                <InputCheckbox class="form-check-input" @bind-Value="holodeck.Type1" id="holodeckType1" />
                <label class="form-check-label" for="holodeckType1">
                    Type 1
                </label>
            </div>
            <div class="form-check form-check-inline">
                <InputCheckbox class="form-check-input" @bind-Value="holodeck.Type2" id="holodeckType2" />
                <label class="form-check-label" for="holodeckType2">
                    Type 2
                </label>
            </div>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Update</button>
        </div>
    </div>
    @* ValidationSummary 无法显示验证信息 *@
    @*<ValidationSummary />*@
    <ValidationMessage For="() => holodeck.Options" />

</EditForm>

@code {
    private string pageTitle = "基本验证";

    private EditContext? editContext;
    private Holodeck holodeck = new();
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new(holodeck);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        if (!holodeck.Options)
        {
            messageStore?.Add(() => holodeck.Options, "Select at least one.");
        }
    }

    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called: Processing the form");

        // Process the form
    }

    public class Holodeck
    {
        public bool Type1 { get; set; }
        public bool Type2 { get; set; }
        public bool Options => Type1 || Type2;
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
