@page "/form-example-6"
@using System.Net
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@*@using Microsoft.AspNetCore.Components.WebAssembly.Authentication*@
@using Microsoft.Extensions.Logging
@using BlazorPractice.Shared
@*@attribute [Authorize]*@
@inject HttpClient Http
@inject ILogger<FormExample6> Logger
@inject IHttpClientFactory ClientFactory

<PageTitle>@pageTitle</PageTitle>

<div class="alert alert-success">
    <p>
        来源：同上
    </p>
    <h5>
        知识点
    </h5>
    <ul>
        <li>
           通过远程 WebApi 进行数据验证。
        </li>
    </ul>
</div>

<hr />

<h1>@pageTitle</h1>

<h4>New Ship Entry Form</h4>

<EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Identifier:</label>
            <InputText class="form-control" @bind-Value="starship.Identifier" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Description (optional):</label>
            <InputTextArea class="form-control" @bind-Value="starship.Description" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Primary Classification:</label>
            <InputSelect class="form-control" @bind-Value="starship.Classification">
                <option value="">Select classification ...</option>
                <option value="Exploration">Exploration</option>
                <option value="Diplomacy">Diplomacy</option>
                <option value="Defense">Defense</option>
            </InputSelect>
        </div>
        <div class="col-md-6">
            <label class="form-label">Maximum Accommodation:</label>
            <InputNumber class="form-control" @bind-Value="starship.MaximumAccommodation" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Engineering Approval:</label>
            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="starship.IsValidatedDesign" id="gridCheck" />
                <label class="form-check-label" for="gridCheck">
                    Yes
                </label>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Production Date:</label>
            <InputDate class="form-control" @bind-Value="starship.ProductionDate" 
                DisplayName="Production Date" ParsingErrorMessage="The {0} field has an incorrect date value." />
        </div>
        <div class="col-md-12">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </div>

    <p style="@messageStyles">
        @message
    </p>

</EditForm>

@code {
    private string pageTitle = "服务器验证";

    private bool disabled;
    private string? message;
    private string? messageStyles = "visibility:hidden";
    private CustomValidation? customValidation;
    private Starship starship = new() { 
        Identifier = string.Empty,
        Description = string.Empty,
        Classification = "Defense",
        MaximumAccommodation = 10,
        IsValidatedDesign = true,
        ProductionDate = DateTime.UtcNow 
    };

    private async Task HandleValidSubmit(EditContext editContext)
    {
        customValidation?.ClearErrors();

        var client = ClientFactory.CreateClient("WebAPI");

        try
        {
            var response = await client.PostAsJsonAsync<Starship>("StarshipValidation", (Starship)editContext.Model);

            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();

            if (response.StatusCode == HttpStatusCode.BadRequest && errors.Any())
            {
                customValidation?.DisplayErrors(errors);
            }
            else if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Validation failed. Status Code: {response.StatusCode}");
            }
            else
            {
                disabled = true;
                messageStyles = "color:green";
                message = "The form has been processed.";
            }
        }
        //catch (AccessTokenNotAvailableException ex)
        //{
        //    ex.Redirect();
        //}
        catch (Exception ex)
        {
            Logger.LogError("Form processing error: {Message}", ex.Message);
            disabled = true;
            messageStyles = "color:red";
            message = "There was an error processing the form.";
        }
    }



}
